/* ----- < 9단계 재귀 > ----- */
//
//
//
//
//
/* --- < 17478 > --- */

/*
< 문제 >
	평소에 질문을 잘 받아주기로 유명한 중앙대학교의 JH 교수님은
	학생들로부터 재귀함수가 무엇인지에 대하여 많은 질문을 받아왔다.

	매번 질문을 잘 받아주셨던 JH 교수님이지만 그는 중앙대학교가 자신과 맞는가에 대한 고민을 항상 해왔다.
	중앙대학교와 자신의 길이 맞지 않다고 생각한 JH 교수님은 결국 중앙대학교를 떠나기로 결정하였다.

	떠나기 전까지도 제자들을 생각하셨던 JH 교수님은
	재귀함수가 무엇인지 물어보는 학생들을 위한 작은 선물로 자동 응답 챗봇을 준비하기로 했다.

	JH 교수님이 만들 챗봇의 응답을 출력하는 프로그램을 만들어보자.

< 입력 >
	교수님이 출력을 원하는 재귀 횟수 N(1 ≤ N ≤ 50)이 주어진다.

< 출력 >
	출력 예시를 보고 재귀 횟수에 따른 챗봇의 응답을 출력한다.

< 응답 >
	어느 한 컴퓨터공학과 학생이 유명한 교수님을 찾아가 물었다.

	"재귀함수가 뭔가요?"
	"잘 들어보게. 옛날옛날 한 산 꼭대기에 이세상 모든 지식을 통달한 선인이 있었어.
	마을 사람들은 모두 그 선인에게 수많은 질문을 했고, 모두 지혜롭게 대답해 주었지.
	그의 답은 대부분 옳았다고 하네.그런데 어느 날, 그 선인에게 한 선비가 찾아와서 물었어."

	"재귀함수는 자기 자신을 호출하는 함수라네"

	라고 답변하였지.
*/

//#include <iostream>
//
//void Slice(int N)
//{
//	for (int i = 0; i < N; i++) std::cout << "----";
//}
//
//void Recursive(int N)
//{
//	static int count{};
//
//	if (N == 0)
//	{
//		Slice(count); std::cout << "\"재귀함수가 뭔가요?\"\n";
//		Slice(count); std::cout << "\"재귀함수는 자기 자신을 호출하는 함수라네\"\n";
//		Slice(count); std::cout << "라고 답변하였지.\n";
//		return;
//	}
//
//	Slice(count); std::cout << "\"재귀함수가 뭔가요?\"\n";
//	Slice(count); std::cout << "\"잘 들어보게. 옛날옛날 한 산 꼭대기에 선인이 있었어.\n";
//	Slice(count); std::cout << "마을 사람들은 모두 그 선인에게 수 많은 질문을 했지.\n";
//	Slice(count); std::cout << "그의 답은 대부분 옳았지, 그런데 어느 날, 그 선인에게 한 선비가 찾아와 물었어\"\n";
//
//	count++;
//	Recursive(N - 1);
//	count--;
//	Slice(count); std::cout << "라고 답변하였지.\n";
//}
//
//int main()
//{
//	int N;
//	std::cin >> N;
//
//	std::cout << "어느 컴퓨터 공학과 학생이 교수님꼐 물었다.\n";
//
//	Recursive(N);
//}

/* --- < 2447 > --- */

/*
< 문제 >
	재귀적인 패턴으로 별을 찍어 보자.
	N이 3의 거듭제곱(3, 9, 27, ...)이라고 할 때, 크기 N의 패턴은 N×N 정사각형 모양이다.

	크기 3의 패턴은 가운데에 공백이 있고, 가운데를 제외한 모든 칸에 별이 하나씩 있는 패턴이다.

	N이 3보다 클 경우, 크기 N의 패턴은 공백으로 채워진 가운데의
	(N/3)×(N/3) 정사각형을 크기 N/3의 패턴으로 둘러싼 형태이다.
	예를 들어 크기 27의 패턴은 예제 출력 1과 같다.

< 입력 >
	첫째 줄에 N이 주어진다. N은 3의 거듭제곱이다. 즉 어떤 정수 k에 대해 N=3k이며, 이때 1 ≤ k < 8이다.

< 출력 >
	첫째 줄부터 N번째 줄까지 별을 출력한다.

< 풀이 >
	입력받은 사이즈를 3으로 나눠가면서 점점 작은 단위로 검사

	N이 3일 경우 3X3의 가운데가 빈 정사각형이 만들어 진다.
	이때 가운데는 인덱스 1,1이다. 이 정사각형을 가로로 이어 붙여보자
	빈 공간의 가로 좌표는 1, 4, 7, 10, 13, 16, ...이다.
	i % 3 == 1로 일반화가 가능하다.

	N이 9일 경우 9X9의 가운데 3X3이 통으로 비게된다.
	이때 빈 공간의 인덱스는 3,3 3,4 3,5 4,3 4,4 4,5 5,3 5,4 5,5이다.
	i / 3 % 3 == 1 로 일반화가 가능하다.

	 | |0    |1    |2    |
	 | |0 1 2 3 4 5 6 7 8|
	0|0|* * * * * * * * *|
	 |1|*   * *   * *   *|
	 |2|* * * * * * * * *|
	1|3|* * *       * * *|
	 |4|*   *       *   *|
	 |5|* * *       * * *|
	2|6|* * * * * * * * *|
	 |7|*   * *   * *   *|
	 |8|* * * * * * * * *|
*/

//#include <iostream>
//
//void Star(int i, int j, int N)
//{
//	if ((i / N) % 3 == 1 && (j / N) % 3 == 1) std::cout << ' ';
//	else if (N / 3 == 0) std::cout << '*';
//	else Star(i, j, N / 3);
//}
//
//int main()
//{
//	int N;
//	std::cin >> N;
//
//	for (int i = 0; i < N; i++)
//	{
//		for (int j = 0; j < N; j++)
//		{
//			Star(i, j, N);
//		}
//		std::cout << '\n';
//	}
//}

//#include <iostream>
//
//void Star(int i, int j, int N)
//{
//// 1. 빈칸이 적용되는 좌표를 찾아 본다.
////		=> (1,1)(1,4)(1,7)(1,10)... (4,1)(7,1)(10,1)...
////		=> 1,4,7,10,13,16,19... => 하나의 숫자로 일반화할 수 있는 계산 공식을 찾는다.
////		=> %3으로 연산하면 모두 1이 나온다.
//// 2. 큰 빈 칸이 적용되는 좌표를 찾아 본다.
////		=> (3,3)(3,4)(3,5)(4,3)(4,4)(4,5)(5,3)(5,4)(5,5) => %3으로 계산하면 일반화가 불가능 하다.
////		=> 큰 빈 칸을 작은 빈칸으로 만드는 작업이 필요하다.
////		=> /3을 할 경우 1로 일반화가 가능하다.
//// 3. 여기서 큰 빈 칸이 더 많이 적용될 수도 있다.
////		=> 이러한 큰 빈 칸을 작개 쪼개는 작업이 필요하다.
//	if ((i / N) % 3 == 1 && (j / N) % 3 == 1) std::cout << ' ';
//	else if (N / 3 == 0) std::cout << '*';
//	else Star(i, j, N / 3);
//}
//
//int main()
//{
//	int N;
//	std::cin >> N;
//
//	for (int i = 0; i < N; i++)
//	{
//		for (int j = 0; j < N; j++)
//		{
//			Star(i, j, N);
//		}
//		std::cout << '\n';
//	}
//}

/* --- < 11729 > --- */

/*
< 문제 >
	세 개의 장대가 있고 첫 번째 장대에는 반경이 서로 다른 n개의 원판이 쌓여 있다.
	각 원판은 반경이 큰 순서대로 쌓여있다. 이제 수도승들이 다음 규칙에 따라 첫 번째 장대에서 세 번째 장대로 옮기려 한다.

	한 번에 한 개의 원판만을 다른 탑으로 옮길 수 있다.
	쌓아 놓은 원판은 항상 위의 것이 아래의 것보다 작아야 한다.
	이 작업을 수행하는데 필요한 이동 순서를 출력하는 프로그램을 작성하라. 단, 이동 횟수는 최소가 되어야 한다.

< 입력 >
	첫째 줄에 첫 번째 장대에 쌓인 원판의 개수 N (1 ≤ N ≤ 20)이 주어진다.

< 출력 >
	첫째 줄에 옮긴 횟수 K를 출력한다.

	두 번째 줄부터 수행 과정을 출력한다.
	두 번째 줄부터 K개의 줄에 걸쳐 두 정수 A B를 빈칸을 사이에 두고 출력하는데,
	이는 A번째 탑의 가장 위에 있는 원판을 B번째 탑의 가장 위로 옮긴다는 뜻이다.

< 풀이 >
	1 << num 은 2^num 을 표현한 방식이다.

	만약 해당 문제에서 pow(2,num)을 사용하였다면,
	double형을 활용하는 pow의 특성상 입력 최대값인 20이 입력되면 오차범위가 커져 틀렸습니다.
	라는 메세지가 출력된다.

	따라서 (int)pow(2,num); 을 활용하던가,
	아니면 (1<<num) 같이 시프트 연산을 활용한 표현을 사용해야 한다.
*/

//#include <iostream>
//#include <math.h>
//
//void Move(char a, char b, int N) { std::cout << a << ' ' << b << '\n'; }
//
//void Hanoi(char a, char b, char c, int N)
//{
//	if (N == 1) Move(a, c, N);
//	else {
//		Hanoi(a, c, b, N - 1);
//		Move(a, c, N);
//		Hanoi(b, a, c, N - 1);
//	}
//}
//
//int main()
//{
//	int N;
//	std::cin >> N;
//
//	std::cout << static_cast<int>(pow(2, N) - 1) << '\n';
//
//	Hanoi('1', '2', '3', N);
//}