/* ----- < 5단계 함수 > ----- */
//
//
//
//
//
/* --- < 4673 > --- */

/*
< 문제 >
	셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다.
	양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자.
	예를 들어, d(75) = 75+7+5 = 87이다.

	양의 정수 n이 주어졌을 때,
	이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다.

	예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고,
	그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다.
	이런식으로 다음과 같은 수열을 만들 수 있다.

	33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...

	n을 d(n)의 생성자라고 한다.
	위의 수열에서 33은 39의 생성자이고,
	39는 51의 생성자, 51은 57의 생성자이다.
	생성자가 한 개보다 많은 경우도 있다.
	예를 들어, 101은 생성자가 2개(91과 100) 있다.

	생성자가 없는 숫자를 셀프 넘버라고 한다.
	100보다 작은 셀프 넘버는 총 13개가 있다.
	1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97

	10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.

< 입력 >
	입력은 없다.

< 출력 >
	10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.
*/

//#include <iostream>
//
//int main()
//{
//	int* num = new int[10000]{ 1 };
//	int temp;
//
//	for (int i = 0; i < 10000; i++)
//	{
//		if (i < 10) {
//			num[i + i] = 1;
//		}
//		else if (i < 100) {
//			num[i + i / 10 + i % 10] = 1;
//		}
//		else if (i < 1000) {
//			num[i + i / 100 + i % 100 / 10 + i % 10] = 1;
//		}
//		else if (i < 10000) {
//			temp = i + i / 1000 + i % 1000 / 100 + i % 100 / 10 + i % 10;
//			if (temp < 10000) num[temp] = 1;
//		}
//	}
//
//	for (int i = 1; i < 10000; i++)
//	{
//		if (!num[i]) std::cout << i << '\n';
//	}
//}

//#include <iostream>
//
//void SelfNumber(bool input[])
//{
//	int temp;
//
//	for (int i = 0; i < 10000; i++)
//	{
//		temp = (i)+(i / 1000) + (i % 1000 / 100) + (i % 100 / 10) + (i % 10);
//
//		if (temp < 10000) input[temp] = true;
//	}
//}
//
//int main()
//{
//	bool* sNum = new bool[10001]{};
//
//	SelfNumber(sNum);
//
//	for (int i = 0; i < 10000; i++)
//	{
//		if (!sNum[i])std::cout << i << '\n';
//	}
//}

//#include <iostream>
//
//int main()
//{
//// 1. 10000 이하의 수 중에서 셀프 넘버들을 모두 출력하면 되는데 
////		=> 셀프 넘버란 생성자가 없는 수 라고 한다.
//// 2. 생성자가 있는 수를 알기 위해서는 모두 더해보는 수 밖에 없다.
////		=> 1 ~ 10000 까지 반복하면서 생성자 공식으로 모두 계산한다.
////		=> 그리고 생성자가 있는 수 를 체크한다.
//// 3. 1 ~ 10000 까지 반복하며너 체크되지 않는 수를 출력한다.
//	bool han[100001]{ 1 };
//	int temp;
//
//	for (int i = 1; i < 10000; i++)
//	{
//		temp = (i)+(i / 1000) + (i % 1000 / 100) + (i % 100 / 10) + (i % 10);
//		
//		if (temp < 10000) han[temp] = 1;
//	}
//	for (int i = 1; i < 10000; i++)
//	{
//		if (!han[i]) std::cout << i << '\n';
//	}
//}

/* --- < 1065 > --- */

/*
< 문제 >
	어떤 양의 정수 X의 각 자리가 등차수열을 이룬다면, 그 수를 한수라고 한다.
	등차수열은 연속된 두 개의 수의 차이가 일정한 수열을 말한다.
	N이 주어졌을 때, 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력하는 프로그램을 작성하시오.

< 입력 >
	첫째 줄에 1,000보다 작거나 같은 자연수 N이 주어진다.

< 출력 >
	첫째 줄에 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력한다.
*/

//#include <iostream>
//
//int Han(int N)
//{
//	int count{};
//
//	if (N < 100) {
//		count = N;
//	}
//	else {
//		count = 99;
//
//		for (int i = 100; i <= N; i++) {
//			if (((i / 100) - (i / 10 % 10)) == ((i / 10 % 10) - (i % 100 % 10))) count++;
//		}
//	}
//
//	return count;
//}
//
//int main()
//{
//	int N;
//	std::cin >> N;
//
//	std::cout << Han(N) << '\n';
//}

//#include <iostream>
//
//int main()
//{
//// 1. 각 자리의 수가 등차 수열을 이룬다면 100 이하의 수는 모두 한수이다.
//// 2. 100 이후의 수만 100자리 수 - 10자리 수 == 10자리 수 - 1자리 수인지 확인하면 된다.
//	int N;
//	std::cin >> N;
//
//	int count{};
//
//	if (N < 100) {
//		count = N;
//	}
//	else {
//		count = 99;
//
//		for (int i = 100; i <= N; i++)
//		{
//			if (((i / 100) - (i / 10 % 10)) == ((i / 10 % 10) - (i % 10))) count++;
//		}
//	}
//
//	std::cout << count << '\n';
//}

//#include <iostream>
//
//int main()
//{
//	int num[10000]{ 1 };
//	int temp;
//
//	for (int i = 0; i < 10000; i++)
//	{
//		if (i < 10) num[i + i] = 1;
//		else if (i < 100) num[i + i / 10 + i % 10] = 1;
//		else if (i < 1000) num[i + i / 100 + i % 100 / 10 + i % 10] = 1;
//		else if (i < 10000)
//		{
//			temp = i + i / 1000 + i % 1000 / 100 + i % 100 / 10 + i % 10;
//			if (temp < 10000) num[temp] = 1;
//		}
//	}
//	for (int i = 1; i < 10000; i++)
//	{
//		if (!num[i]) std::cout << i << '\n';
//	}
//}

//#include <iostream>
//
//int main()
//{
//	int num[10000]{ 1 };
//	int temp;
//
//	for (int i = 0; i < 10000; i++)
//	{
//		if (i < 10) num[i + i] = 1;
//		else if (i < 100) num[i + i / 10 + i % 10] = 1;
//		else if (i < 1000) num[i + i / 100 + i % 100 / 10 + i % 10] = 1;
//		else if (i < 10000)
//		{
//			temp = i + i / 1000 + i % 1000 / 100 + i % 100 / 10 + i % 10;
//			if (temp < 10000) num[temp] = 1;
//		}
//	}
//	for (int i = 1; i < 10000; i++)
//	{
//		if (!num[i]) std::cout << i << '\n';
//	}
//}

//#include <iostream>
//
//int HanNum(int N)
//{
//	int count{};
//
//	if (N < 100) count = N;
//	else
//	{
//		count = 99;
//		for (int i = 100; i <= N; i++)
//		{
//			if (((i / 100) - (i / 10 % 10)) == ((i / 10 % 10) - (i % 100 % 10))) count++;
//		}
//	}
//	return count;
//}
//int main()
//{
//	int N;
//	std::cin >> N;
//	std::cout << HanNum(N) << '\n';
//}

//#include <iostream>
//
//int HanNum(int N)
//{
//	int count{};
//
//	if (N < 100) count = N;
//	else
//	{
//		count = 99;
//		for (int i = 100; i <= N; i++)
//		{
//			if (((i / 100) - (i / 10 % 10)) == ((i / 10 % 10) - (i % 100 % 10))) count++;
//		}
//	}
//	return count;
//}
//int main()
//{
//	int N;
//	std::cin >> N;
//	std::cout << HanNum(N) << '\n';
//}